##########################################
# WARNING: This is an auto-generated file.
# DO NOT EDIT THIS FILE DIRECTLY
# ANY EDITS WILL BE LOST
##########################################
from dataclasses import dataclass, field
from typing import Any, Optional


@dataclass
class Output:
    """Represents the output properties of an AI agent.Each output property can be a simple kind, an array, or an object.
    Attributes
    ----------
    name : str
        Name of the output property
    kind : str
        The data kind of the output property
    description : Optional[str]
        A short description of the output property
    required : Optional[bool]
        Whether the output property is required
    """

    name: str = field(default="")
    kind: str = field(default="")
    description: Optional[str] = field(default="")
    required: Optional[bool] = field(default=True)

    @staticmethod
    def load(data: Any) -> "Output":
        """Load a Output instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for Output: {data}")

        # load polymorphic Output instance
        instance = Output.load_kind(data)
        if data is not None and "name" in data:
            instance.name = data["name"]
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "description" in data:
            instance.description = data["description"]
        if data is not None and "required" in data:
            instance.required = data["required"]
        return instance

    @staticmethod
    def load_kind(data: dict) -> "Output":
        # load polymorphic Output instance
        if data is not None and "kind" in data:
            discriminator_value = data["kind"]
            if discriminator_value == "array":
                return ArrayOutput.load(data)
            elif discriminator_value == "object":
                return ObjectOutput.load(data)
            else:
                # create new instance (stop recursion)
                return Output()
        else:
            # create new instance
            return Output()


@dataclass
class ArrayOutput(Output):
    """Represents an array output property.This extends the base Output model to represent an array of items.
    Attributes
    ----------
    kind : str

    items : Output
        The type of items contained in the array
    """

    kind: str = field(default="array")
    items: Output = field(default_factory=Output)

    @staticmethod
    def load(data: Any) -> "ArrayOutput":
        """Load a ArrayOutput instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for ArrayOutput: {data}")

        # create new instance
        instance = ArrayOutput()
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "items" in data:
            instance.items = Output.load(data["items"])
        return instance


@dataclass
class ObjectOutput(Output):
    """Represents an object output property.This extends the base Output model to represent a structured object.
    Attributes
    ----------
    kind : str

    properties : list[Output]
        The properties contained in the object
    """

    kind: str = field(default="object")
    properties: list[Output] = field(default_factory=list)

    @staticmethod
    def load(data: Any) -> "ObjectOutput":
        """Load a ObjectOutput instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for ObjectOutput: {data}")

        # create new instance
        instance = ObjectOutput()
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "properties" in data:
            instance.properties = ObjectOutput.load_properties(data["properties"])
        return instance

    @staticmethod
    def load_properties(data: dict | list) -> list[Output]:
        if isinstance(data, dict):
            # convert simple named properties to list of Output
            data = [{"name": k, **v} for k, v in data.items()]

        return [Output.load(item) for item in data]
