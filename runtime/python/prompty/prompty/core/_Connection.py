##########################################
# WARNING: This is an auto-generated file.
# DO NOT EDIT THIS FILE DIRECTLY
# ANY EDITS WILL BE LOST
##########################################
from abc import ABC
from dataclasses import dataclass, field
from typing import Any, Optional


@dataclass
class Connection(ABC):
    """Connection configuration for AI agents.`provider`, `kind`, and `endpoint` are required properties here,but this section can accept additional via options.
    Attributes
    ----------
    kind : str
        The Authentication kind for the AI service (e.g., 'key' for API key, 'oauth' for OAuth tokens)
    authority : str
        The authority level for the connection, indicating under whose authority the connection is made (e.g., 'user', 'agent', 'system')
    usageDescription : Optional[str]
        The usage description for the connection, providing context on how this connection will be used
    """

    kind: str = field(default="")
    authority: str = field(default="system")
    usageDescription: Optional[str] = field(default="")

    @staticmethod
    def load(data: Any) -> "Connection":
        """Load a Connection instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for Connection: {data}")

        # load polymorphic Connection instance
        instance = Connection.load_kind(data)
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "authority" in data:
            instance.authority = data["authority"]
        if data is not None and "usageDescription" in data:
            instance.usageDescription = data["usageDescription"]
        return instance

    @staticmethod
    def load_kind(data: dict) -> "Connection":
        # load polymorphic Connection instance
        if data is not None and "kind" in data:
            discriminator_value = data["kind"]
            if discriminator_value == "reference":
                return ReferenceConnection.load(data)
            elif discriminator_value == "key":
                return KeyConnection.load(data)
            elif discriminator_value == "oauth":
                return OAuthConnection.load(data)
            elif discriminator_value == "foundry":
                return FoundryConnection.load(data)
            else:
                # load default instance
                return GenericConnection.load(data)
        else:
            raise ValueError("Missing Connection discriminator property: 'kind'")


@dataclass
class GenericConnection(Connection):
    """Generic connection configuration for AI services.
    Attributes
    ----------
    kind : str
        The Authentication kind for the AI service (e.g., 'key' for API key, 'oauth' for OAuth tokens)
    options : Optional[dict[str, Any]]
        Additional options for the connection
    """

    kind: str = field(default="*")
    options: Optional[dict[str, Any]] = field(default_factory=dict)

    @staticmethod
    def load(data: Any) -> "GenericConnection":
        """Load a GenericConnection instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for GenericConnection: {data}")

        # create new instance
        instance = GenericConnection()
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "options" in data:
            instance.options = data["options"]
        return instance


@dataclass
class ReferenceConnection(Connection):
    """Connection configuration for AI services using named connections.
    Attributes
    ----------
    kind : str
        The Authentication kind for the AI service (e.g., 'key' for API key, 'oauth' for OAuth tokens)
    name : str
        The name of the connection
    """

    kind: str = field(default="reference")
    name: str = field(default="")

    @staticmethod
    def load(data: Any) -> "ReferenceConnection":
        """Load a ReferenceConnection instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for ReferenceConnection: {data}")

        # create new instance
        instance = ReferenceConnection()
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "name" in data:
            instance.name = data["name"]
        return instance


@dataclass
class KeyConnection(Connection):
    """Connection configuration for AI services using API keys.
    Attributes
    ----------
    kind : str
        The Authentication kind for the AI service (e.g., 'key' for API key, 'oauth' for OAuth tokens)
    endpoint : str
        The endpoint URL for the AI service
    key : str
        The API key for authenticating with the AI service
    """

    kind: str = field(default="key")
    endpoint: str = field(default="")
    key: str = field(default="")

    @staticmethod
    def load(data: Any) -> "KeyConnection":
        """Load a KeyConnection instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for KeyConnection: {data}")

        # create new instance
        instance = KeyConnection()
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "endpoint" in data:
            instance.endpoint = data["endpoint"]
        if data is not None and "key" in data:
            instance.key = data["key"]
        return instance


@dataclass
class OAuthConnection(Connection):
    """Connection configuration for AI services using OAuth authentication.
    Attributes
    ----------
    kind : str
        The Authentication kind for the AI service (e.g., 'key' for API key, 'oauth' for OAuth tokens)
    endpoint : str
        The endpoint URL for the AI service
    clientId : str
        The OAuth client ID for authenticating with the AI service
    clientSecret : str
        The OAuth client secret for authenticating with the AI service
    tokenUrl : str
        The OAuth token URL for obtaining access tokens
    scopes : list[str]
        The scopes required for the OAuth token
    """

    kind: str = field(default="oauth")
    endpoint: str = field(default="")
    clientId: str = field(default="")
    clientSecret: str = field(default="")
    tokenUrl: str = field(default="")
    scopes: list[str] = field(default_factory=list)

    @staticmethod
    def load(data: Any) -> "OAuthConnection":
        """Load a OAuthConnection instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for OAuthConnection: {data}")

        # create new instance
        instance = OAuthConnection()
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "endpoint" in data:
            instance.endpoint = data["endpoint"]
        if data is not None and "clientId" in data:
            instance.clientId = data["clientId"]
        if data is not None and "clientSecret" in data:
            instance.clientSecret = data["clientSecret"]
        if data is not None and "tokenUrl" in data:
            instance.tokenUrl = data["tokenUrl"]
        if data is not None and "scopes" in data:
            instance.scopes = data["scopes"]
        return instance


@dataclass
class FoundryConnection(Connection):
    """
    Attributes
    ----------
    kind : str
        The Authentication kind for the AI service (e.g., 'key' for API key, 'oauth' for OAuth tokens)
    type : str
        The Foundry endpoint URL for the AI service
    name : str
        The Foundry connection name
    project : str
        The Foundry project name
    """

    kind: str = field(default="foundry")
    type: str = field(default="")
    name: str = field(default="")
    project: str = field(default="")

    @staticmethod
    def load(data: Any) -> "FoundryConnection":
        """Load a FoundryConnection instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for FoundryConnection: {data}")

        # create new instance
        instance = FoundryConnection()
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "type" in data:
            instance.type = data["type"]
        if data is not None and "name" in data:
            instance.name = data["name"]
        if data is not None and "project" in data:
            instance.project = data["project"]
        return instance
