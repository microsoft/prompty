##########################################
# WARNING: This is an auto-generated file.
# DO NOT EDIT THIS FILE DIRECTLY
# ANY EDITS WILL BE LOST
##########################################
from dataclasses import dataclass, field
from typing import Any, Optional

from ._Registry import Registry
from ._Scale import Scale


@dataclass
class ContainerDefinition:
    """Definition for a containerized AI agent.

    Attributes
    ----------
    image : str
        The container image name
    tag : Optional[str]
        The container image tag (defaults to 'latest' if not specified)
    registry : Registry
        Container image registry definition
    scale : Scale
        Instance scaling configuration

    """

    image: str = field(default="")
    tag: Optional[str] = field(default="latest")
    registry: Registry = field(default_factory=Registry)
    scale: Scale = field(default_factory=Scale)

    @staticmethod
    def load(data: Any) -> "ContainerDefinition":
        """Load a ContainerDefinition instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for ContainerDefinition: {data}")

        # create new instance
        instance = ContainerDefinition()
        if data is not None and "image" in data:
            instance.image = data["image"]
        if data is not None and "tag" in data:
            instance.tag = data["tag"]
        if data is not None and "registry" in data:
            instance.registry = Registry.load(data["registry"])
        if data is not None and "scale" in data:
            instance.scale = Scale.load(data["scale"])
        return instance
