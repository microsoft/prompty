##########################################
# WARNING: This is an auto-generated file.
# DO NOT EDIT THIS FILE DIRECTLY
# ANY EDITS WILL BE LOST
##########################################
from dataclasses import dataclass, field
from typing import Any, Optional


@dataclass
class Parser:
    """Template parser definition
    Attributes
    ----------
    kind : str
        Parser used to process the rendered template into API-compatible format
    options : Optional[dict[str, Any]]
        Options for the parser
    """

    kind: str = field(default="*")
    options: Optional[dict[str, Any]] = field(default_factory=dict)

    @staticmethod
    def load(data: Any) -> "Parser":
        """Load a Parser instance."""
        # handle alternate representations
        if isinstance(data, str):
            data = {"kind": data}

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for Parser: {data}")

        # create new instance
        instance = Parser()
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "options" in data:
            instance.options = data["options"]
        return instance
