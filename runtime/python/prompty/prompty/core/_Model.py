##########################################
# WARNING: This is an auto-generated file.
# DO NOT EDIT THIS FILE DIRECTLY
# ANY EDITS WILL BE LOST
##########################################
from dataclasses import dataclass, field
from typing import Any, Optional

from ._Connection import Connection
from ._ModelOptions import ModelOptions


@dataclass
class Model:
    """Model for defining the structure and behavior of AI agents.
    This model includes properties for specifying the model&#39;s provider, connection details, and various options.
    It allows for flexible configuration of AI models to suit different use cases and requirements.

    Attributes
    ----------
    id : str
        The unique identifier of the model - can be used as the single property shorthand
    provider : Optional[str]
        The provider of the model (e.g., 'openai', 'azure', 'anthropic')
    connection : Optional[Connection]
        The connection configuration for the model
    options : Optional[ModelOptions]
        Additional options for the model

    """

    id: str = field(default="")
    provider: Optional[str] = field(default="")
    connection: Optional[Connection] = field(default=None)
    options: Optional[ModelOptions] = field(default=None)

    @staticmethod
    def load(data: Any) -> "Model":
        """Load a Model instance."""
        # handle alternate representations
        if isinstance(data, str):
            data = {"id": data}

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for Model: {data}")

        # create new instance
        instance = Model()
        if data is not None and "id" in data:
            instance.id = data["id"]
        if data is not None and "provider" in data:
            instance.provider = data["provider"]
        if data is not None and "connection" in data:
            instance.connection = Connection.load(data["connection"])
        if data is not None and "options" in data:
            instance.options = ModelOptions.load(data["options"])
        return instance
