##########################################
# WARNING: This is an auto-generated file.
# DO NOT EDIT THIS FILE DIRECTLY
# ANY EDITS WILL BE LOST
##########################################
from abc import ABC
from dataclasses import dataclass, field
from typing import Any, Optional

from ._Binding import Binding
from ._BingSearchConfiguration import BingSearchConfiguration
from ._Connection import Connection
from ._Model import Model
from ._Parameter import Parameter


@dataclass
class Tool(ABC):
    """Represents a tool that can be used in prompts.
    Attributes
    ----------
    name : str
        Name of the tool. If a function tool, this is the function name, otherwise it is the type
    kind : str
        The kind identifier for the tool
    description : Optional[str]
        A short description of the tool for metadata purposes
    bindings : Optional[list[Binding]]
        Tool argument bindings to input properties
    """

    name: str = field(default="")
    kind: str = field(default="")
    description: Optional[str] = field(default="")
    bindings: Optional[list[Binding]] = field(default_factory=list)

    @staticmethod
    def load(data: Any) -> "Tool":
        """Load a Tool instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for Tool: {data}")

        # load polymorphic Tool instance
        instance = Tool.load_kind(data)
        if data is not None and "name" in data:
            instance.name = data["name"]
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "description" in data:
            instance.description = data["description"]
        if data is not None and "bindings" in data:
            instance.bindings = Tool.load_bindings(data["bindings"])
        return instance

    @staticmethod
    def load_bindings(data: dict | list) -> list[Binding]:
        if isinstance(data, dict):
            # convert simple named bindings to list of Binding
            # simple expansion to "name", "input"
            data = [{"name": k, "input": v} for k, v in data.items()]

        return [Binding.load(item) for item in data]

    @staticmethod
    def load_kind(data: dict) -> "Tool":
        # load polymorphic Tool instance
        if data is not None and "kind" in data:
            discriminator_value = data["kind"]
            if discriminator_value == "function":
                return FunctionTool.load(data)
            elif discriminator_value == "bing_search":
                return BingSearchTool.load(data)
            elif discriminator_value == "file_search":
                return FileSearchTool.load(data)
            elif discriminator_value == "mcp":
                return McpTool.load(data)
            elif discriminator_value == "model":
                return ModelTool.load(data)
            elif discriminator_value == "openapi":
                return OpenApiTool.load(data)
            else:
                # load default instance
                return ServerTool.load(data)
        else:
            raise ValueError("Missing Tool discriminator property: 'kind'")


@dataclass
class FunctionTool(Tool):
    """Represents a local function tool.
    Attributes
    ----------
    kind : str
        The kind identifier for function tools
    parameters : list[Parameter]
        Parameters accepted by the function tool
    """

    kind: str = field(default="function")
    parameters: list[Parameter] = field(default_factory=list)

    @staticmethod
    def load(data: Any) -> "FunctionTool":
        """Load a FunctionTool instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for FunctionTool: {data}")

        # create new instance
        instance = FunctionTool()
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "parameters" in data:
            instance.parameters = FunctionTool.load_parameters(data["parameters"])
        return instance

    @staticmethod
    def load_parameters(data: dict | list) -> list[Parameter]:
        if isinstance(data, dict):
            # convert simple named parameters to list of Parameter
            data = [{"name": k, **v} for k, v in data.items()]

        return [Parameter.load(item) for item in data]


@dataclass
class ServerTool(Tool):
    """Represents a generic server tool that runs on a serverThis tool kind is designed for operations that require server-side executionIt may include features such as authentication, data storage, and long-running processesThis tool kind is ideal for tasks that involve complex computations or access to secure resourcesServer tools can be used to offload heavy processing from client applications
    Attributes
    ----------
    kind : str
        The kind identifier for server tools. This is a wildcard and can represent any server tool type not explicitly defined.
    connection : Connection
        Connection configuration for the server tool
    options : dict[str, Any]
        Configuration options for the server tool
    """

    kind: str = field(default="*")
    connection: Connection = field(default_factory=Connection)
    options: dict[str, Any] = field(default_factory=dict)

    @staticmethod
    def load(data: Any) -> "ServerTool":
        """Load a ServerTool instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for ServerTool: {data}")

        # create new instance
        instance = ServerTool()
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "connection" in data:
            instance.connection = Connection.load(data["connection"])
        if data is not None and "options" in data:
            instance.options = data["options"]
        return instance


@dataclass
class BingSearchTool(Tool):
    """The Bing search tool.
    Attributes
    ----------
    kind : str
        The kind identifier for Bing search tools
    connection : Connection
        The connection configuration for the Bing search tool
    configurations : list[BingSearchConfiguration]
        The configuration options for the Bing search tool
    """

    kind: str = field(default="bing_search")
    connection: Connection = field(default_factory=Connection)
    configurations: list[BingSearchConfiguration] = field(default_factory=list)

    @staticmethod
    def load(data: Any) -> "BingSearchTool":
        """Load a BingSearchTool instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for BingSearchTool: {data}")

        # create new instance
        instance = BingSearchTool()
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "connection" in data:
            instance.connection = Connection.load(data["connection"])
        if data is not None and "configurations" in data:
            instance.configurations = BingSearchTool.load_configurations(data["configurations"])
        return instance

    @staticmethod
    def load_configurations(data: dict | list) -> list[BingSearchConfiguration]:
        if isinstance(data, dict):
            # convert simple named configurations to list of BingSearchConfiguration
            data = [{"name": k, **v} for k, v in data.items()]

        return [BingSearchConfiguration.load(item) for item in data]


@dataclass
class FileSearchTool(Tool):
    """A tool for searching files.This tool allows an AI agent to search for files based on a query.
    Attributes
    ----------
    kind : str
        The kind identifier for file search tools
    connection : Connection
        The connection configuration for the file search tool
    maxNumResults : Optional[int]
        The maximum number of search results to return.
    ranker : str
        File search ranker.
    scoreThreshold : float
        Ranker search threshold.
    """

    kind: str = field(default="file_search")
    connection: Connection = field(default_factory=Connection)
    maxNumResults: Optional[int] = field(default=0)
    ranker: str = field(default="")
    scoreThreshold: float = field(default=0.0)

    @staticmethod
    def load(data: Any) -> "FileSearchTool":
        """Load a FileSearchTool instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for FileSearchTool: {data}")

        # create new instance
        instance = FileSearchTool()
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "connection" in data:
            instance.connection = Connection.load(data["connection"])
        if data is not None and "maxNumResults" in data:
            instance.maxNumResults = data["maxNumResults"]
        if data is not None and "ranker" in data:
            instance.ranker = data["ranker"]
        if data is not None and "scoreThreshold" in data:
            instance.scoreThreshold = data["scoreThreshold"]
        return instance


@dataclass
class McpTool(Tool):
    """The MCP Server tool.
    Attributes
    ----------
    kind : str
        The kind identifier for MCP tools
    connection : Connection
        The connection configuration for the MCP tool
    name : str
        The name of the MCP tool
    url : str
        The URL of the MCP server
    allowed : list[str]
        List of allowed operations or resources for the MCP tool
    """

    kind: str = field(default="mcp")
    connection: Connection = field(default_factory=Connection)
    name: str = field(default="")
    url: str = field(default="")
    allowed: list[str] = field(default_factory=list)

    @staticmethod
    def load(data: Any) -> "McpTool":
        """Load a McpTool instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for McpTool: {data}")

        # create new instance
        instance = McpTool()
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "connection" in data:
            instance.connection = Connection.load(data["connection"])
        if data is not None and "name" in data:
            instance.name = data["name"]
        if data is not None and "url" in data:
            instance.url = data["url"]
        if data is not None and "allowed" in data:
            instance.allowed = data["allowed"]
        return instance


@dataclass
class ModelTool(Tool):
    """The MCP Server tool.
    Attributes
    ----------
    kind : str
        The kind identifier for a model connection as a tool
    model : Model
        The connection configuration for the model tool
    """

    kind: str = field(default="model")
    model: Model = field(default_factory=Model)

    @staticmethod
    def load(data: Any) -> "ModelTool":
        """Load a ModelTool instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for ModelTool: {data}")

        # create new instance
        instance = ModelTool()
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "model" in data:
            instance.model = Model.load(data["model"])
        return instance


@dataclass
class OpenApiTool(Tool):
    """
    Attributes
    ----------
    kind : str
        The kind identifier for OpenAPI tools
    connection : Connection
        The connection configuration for the OpenAPI tool
    specification : str
        The URL or relative path to the OpenAPI specification document (JSON or YAML format)
    operationIds : list[str]
        The name of the operation to be invoked from the OpenAPI specification
    """

    kind: str = field(default="openapi")
    connection: Connection = field(default_factory=Connection)
    specification: str = field(default="")
    operationIds: list[str] = field(default_factory=list)

    @staticmethod
    def load(data: Any) -> "OpenApiTool":
        """Load a OpenApiTool instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for OpenApiTool: {data}")

        # create new instance
        instance = OpenApiTool()
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "connection" in data:
            instance.connection = Connection.load(data["connection"])
        if data is not None and "specification" in data:
            instance.specification = data["specification"]
        if data is not None and "operationIds" in data:
            instance.operationIds = data["operationIds"]
        return instance
