##########################################
# WARNING: This is an auto-generated file.
# DO NOT EDIT THIS FILE DIRECTLY
# ANY EDITS WILL BE LOST
##########################################
from dataclasses import dataclass, field
from typing import Any, Optional


@dataclass
class BingSearchConfiguration:
    """Configuration options for the Bing search tool.
    Attributes
    ----------
    name : str
        The name of the Bing search tool instance, used to identify the specific instance in the system
    connectionId : str
        Connection id for grounding with bing search
    market : Optional[str]
        The market where the results come from.
    setLang : Optional[str]
        The language to use for user interface strings when calling Bing API.
    count : Optional[int]
        The number of search results to return in the bing api response
    freshness : Optional[str]
        Filter search results by a specific time range. Accepted values: https://learn.microsoft.com/bing/search-apis/bing-web-search/reference/query-parameters
    """

    name: str = field(default="")
    connectionId: str = field(default="")
    market: Optional[str] = field(default="")
    setLang: Optional[str] = field(default="")
    count: Optional[int] = field(default=0)
    freshness: Optional[str] = field(default="")

    @staticmethod
    def load(data: Any) -> "BingSearchConfiguration":
        """Load a BingSearchConfiguration instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for BingSearchConfiguration: {data}")

        # create new instance
        instance = BingSearchConfiguration()
        if data is not None and "name" in data:
            instance.name = data["name"]
        if data is not None and "connectionId" in data:
            instance.connectionId = data["connectionId"]
        if data is not None and "market" in data:
            instance.market = data["market"]
        if data is not None and "setLang" in data:
            instance.setLang = data["setLang"]
        if data is not None and "count" in data:
            instance.count = data["count"]
        if data is not None and "freshness" in data:
            instance.freshness = data["freshness"]
        return instance
