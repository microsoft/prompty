##########################################
# WARNING: This is an auto-generated file.
# DO NOT EDIT THIS FILE DIRECTLY
# ANY EDITS WILL BE LOST
##########################################
from dataclasses import dataclass, field
from typing import Any

from ._Model import Model
from ._Parameter import Parameter
from ._PromptyBase import PromptyBase


@dataclass
class PromptyManifest:
    """The following represents a manifest that can be used to create agents dynamically.It includes a list of models that the publisher of the manifest has tested andhas confidence will work with an instantiated prompt agent.The manifest also includes parameters that can be used to configure the agent&#39;s behavior.These parameters include values that can be used as publisher parameters that canbe used to describe additional variables that have been tested and are known to work.Variables described here are then used to project into a prompt agent that can be executed.Once parameters are provided, these can be referenced in the manifest using the following notation:`${param:MyParameter}`This allows for dynamic configuration of the agent based on the provided parameters.(This notation is used elsewhere, but only the `param` scope is supported here)
    Attributes
    ----------
    agent : PromptyBase
        The agent that this manifest is based on
    models : list[Model]
        Additional models that are known to work with this prompt
    parameters : list[Parameter]
        Parameters for configuring the agent's behavior and execution
    """

    agent: PromptyBase = field(default_factory=PromptyBase)
    models: list[Model] = field(default_factory=list)
    parameters: list[Parameter] = field(default_factory=list)

    @staticmethod
    def load(data: Any) -> "PromptyManifest":
        """Load a PromptyManifest instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for PromptyManifest: {data}")

        # create new instance
        instance = PromptyManifest()
        if data is not None and "agent" in data:
            instance.agent = PromptyBase.load(data["agent"])
        if data is not None and "models" in data:
            instance.models = PromptyManifest.load_models(data["models"])
        if data is not None and "parameters" in data:
            instance.parameters = PromptyManifest.load_parameters(data["parameters"])
        return instance

    @staticmethod
    def load_models(data: dict | list) -> list[Model]:
        if isinstance(data, dict):
            # convert simple named models to list of Model
            data = [{"name": k, **v} for k, v in data.items()]

        return [Model.load(item) for item in data]

    @staticmethod
    def load_parameters(data: dict | list) -> list[Parameter]:
        if isinstance(data, dict):
            # convert simple named parameters to list of Parameter
            data = [{"name": k, **v} for k, v in data.items()]

        return [Parameter.load(item) for item in data]
