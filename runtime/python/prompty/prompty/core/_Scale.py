##########################################
# WARNING: This is an auto-generated file.
# DO NOT EDIT THIS FILE DIRECTLY
# ANY EDITS WILL BE LOST
##########################################
from dataclasses import dataclass, field
from typing import Any, Optional


@dataclass
class Scale:
    """Configuration for scaling container instances.

    Attributes
    ----------
    minReplicas : Optional[int]
        Minimum number of container instances to run
    maxReplicas : Optional[int]
        Maximum number of container instances to run
    cpu : float
        CPU allocation per instance (in cores)
    memory : float
        Memory allocation per instance (in GB)

    """

    minReplicas: Optional[int] = field(default=1)
    maxReplicas: Optional[int] = field(default=5)
    cpu: float = field(default=0.5)
    memory: float = field(default=2)

    @staticmethod
    def load(data: Any) -> "Scale":
        """Load a Scale instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for Scale: {data}")

        # create new instance
        instance = Scale()
        if data is not None and "minReplicas" in data:
            instance.minReplicas = data["minReplicas"]
        if data is not None and "maxReplicas" in data:
            instance.maxReplicas = data["maxReplicas"]
        if data is not None and "cpu" in data:
            instance.cpu = data["cpu"]
        if data is not None and "memory" in data:
            instance.memory = data["memory"]
        return instance
