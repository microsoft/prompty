##########################################
# WARNING: This is an auto-generated file.
# DO NOT EDIT THIS FILE DIRECTLY
# ANY EDITS WILL BE LOST
##########################################
from dataclasses import dataclass, field
from typing import Any

from ._Format import Format
from ._Parser import Parser


@dataclass
class Template:
    """Template model for defining prompt templates.This model specifies the rendering engine used for slot filling prompts,the parser used to process the rendered template into API-compatible format,and additional options for the template engine.It allows for the creation of reusable templates that can be filled with dynamic dataand processed to generate prompts for AI models.
    Attributes
    ----------
    format : Format
        Template rendering engine used for slot filling prompts (e.g., mustache, jinja2)
    parser : Parser
        Parser used to process the rendered template into API-compatible format
    """

    format: Format = field(default_factory=Format)
    parser: Parser = field(default_factory=Parser)

    @staticmethod
    def load(data: Any) -> "Template":
        """Load a Template instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for Template: {data}")

        # create new instance
        instance = Template()
        if data is not None and "format" in data:
            instance.format = Format.load(data["format"])
        if data is not None and "parser" in data:
            instance.parser = Parser.load(data["parser"])
        return instance
