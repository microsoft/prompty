##########################################
# WARNING: This is an auto-generated file.
# DO NOT EDIT THIS FILE DIRECTLY
# ANY EDITS WILL BE LOST
##########################################
from abc import ABC
from dataclasses import dataclass, field
from typing import Any, Optional

from ._Connection import Connection


@dataclass
class Registry(ABC):
    """Definition for a container image registry.

    Attributes
    ----------
    kind : str
        The kind of container registry
    connection : Connection
        The connection configuration for accessing the container registry

    """

    kind: str = field(default="")
    connection: Connection = field(default_factory=Connection)

    @staticmethod
    def load(data: Any) -> "Registry":
        """Load a Registry instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for Registry: {data}")

        # load polymorphic Registry instance
        instance = Registry.load_kind(data)
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "connection" in data:
            instance.connection = Connection.load(data["connection"])
        return instance

    @staticmethod
    def load_kind(data: dict) -> "Registry":
        # load polymorphic Registry instance
        if data is not None and "kind" in data:
            discriminator_value = data["kind"]
            if discriminator_value == "acr":
                return AzureContainerRegistry.load(data)
            else:
                # load default instance
                return GenericRegistry.load(data)
        else:
            raise ValueError("Missing Registry discriminator property: 'kind'")


@dataclass
class GenericRegistry(Registry):
    """Definition for a generic container image registry.

    Attributes
    ----------
    kind : str
        The kind of container registry
    repository : str
        The URL of the container registry
    username : Optional[str]
        The username for accessing the container registry
    password : Optional[str]
        The password for accessing the container registry

    """

    kind: str = field(default="*")
    repository: str = field(default="")
    username: Optional[str] = field(default="")
    password: Optional[str] = field(default="")

    @staticmethod
    def load(data: Any) -> "GenericRegistry":
        """Load a GenericRegistry instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for GenericRegistry: {data}")

        # create new instance
        instance = GenericRegistry()
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "repository" in data:
            instance.repository = data["repository"]
        if data is not None and "username" in data:
            instance.username = data["username"]
        if data is not None and "password" in data:
            instance.password = data["password"]
        return instance


@dataclass
class AzureContainerRegistry(Registry):
    """Definition for an Azure Container Registry (ACR).

    Attributes
    ----------
    kind : str
        The kind of container registry
    subscription : str
        The Azure subscription ID for the ACR
    resourceGroup : str
        The Azure resource group containing the ACR
    registryName : str
        The name of the ACR

    """

    kind: str = field(default="acr")
    subscription: str = field(default="")
    resourceGroup: str = field(default="")
    registryName: str = field(default="")

    @staticmethod
    def load(data: Any) -> "AzureContainerRegistry":
        """Load a AzureContainerRegistry instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for AzureContainerRegistry: {data}")

        # create new instance
        instance = AzureContainerRegistry()
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "subscription" in data:
            instance.subscription = data["subscription"]
        if data is not None and "resourceGroup" in data:
            instance.resourceGroup = data["resourceGroup"]
        if data is not None and "registryName" in data:
            instance.registryName = data["registryName"]
        return instance
