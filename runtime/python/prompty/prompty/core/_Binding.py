##########################################
# WARNING: This is an auto-generated file.
# DO NOT EDIT THIS FILE DIRECTLY
# ANY EDITS WILL BE LOST
##########################################
from dataclasses import dataclass, field
from typing import Any


@dataclass
class Binding:
    """Represents a binding between an input property and a tool parameter.

    Attributes
    ----------
    name : str
        Name of the binding
    input : str
        The input property that will be bound to the tool parameter argument

    """

    name: str = field(default="")
    input: str = field(default="")

    @staticmethod
    def load(data: Any) -> "Binding":
        """Load a Binding instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for Binding: {data}")

        # create new instance
        instance = Binding()
        if data is not None and "name" in data:
            instance.name = data["name"]
        if data is not None and "input" in data:
            instance.input = data["input"]
        return instance
