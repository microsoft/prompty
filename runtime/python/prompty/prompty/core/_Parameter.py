##########################################
# WARNING: This is an auto-generated file.
# DO NOT EDIT THIS FILE DIRECTLY
# ANY EDITS WILL BE LOST
##########################################
from dataclasses import dataclass, field
from typing import Any, Optional


@dataclass
class Parameter:
    """Represents a parameter for a tool.
    Attributes
    ----------
    name : str
        Name of the parameter
    kind : str
        The data type of the tool parameter
    description : Optional[str]
        A short description of the property
    required : Optional[bool]
        Whether the tool parameter is required
    enum : Optional[list[Any]]
        Allowed enumeration values for the parameter
    """

    name: str = field(default="")
    kind: str = field(default="")
    description: Optional[str] = field(default="")
    required: Optional[bool] = field(default=True)
    enum: Optional[list[Any]] = field(default_factory=list)

    @staticmethod
    def load(data: Any) -> "Parameter":
        """Load a Parameter instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for Parameter: {data}")

        # load polymorphic Parameter instance
        instance = Parameter.load_kind(data)
        if data is not None and "name" in data:
            instance.name = data["name"]
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "description" in data:
            instance.description = data["description"]
        if data is not None and "required" in data:
            instance.required = data["required"]
        if data is not None and "enum" in data:
            instance.enum = data["enum"]
        return instance

    @staticmethod
    def load_kind(data: dict) -> "Parameter":
        # load polymorphic Parameter instance
        if data is not None and "kind" in data:
            discriminator_value = data["kind"]
            if discriminator_value == "object":
                return ObjectParameter.load(data)
            elif discriminator_value == "array":
                return ArrayParameter.load(data)
            else:
                # create new instance (stop recursion)
                return Parameter()
        else:
            # create new instance
            return Parameter()


@dataclass
class ObjectParameter(Parameter):
    """Represents an object parameter for a tool.
    Attributes
    ----------
    kind : str

    properties : list[Parameter]
        The properties of the object parameter
    """

    kind: str = field(default="object")
    properties: list[Parameter] = field(default_factory=list)

    @staticmethod
    def load(data: Any) -> "ObjectParameter":
        """Load a ObjectParameter instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for ObjectParameter: {data}")

        # create new instance
        instance = ObjectParameter()
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "properties" in data:
            instance.properties = ObjectParameter.load_properties(data["properties"])
        return instance

    @staticmethod
    def load_properties(data: dict | list) -> list[Parameter]:
        if isinstance(data, dict):
            # convert simple named properties to list of Parameter
            data = [{"name": k, **v} for k, v in data.items()]

        return [Parameter.load(item) for item in data]


@dataclass
class ArrayParameter(Parameter):
    """Represents an array parameter for a tool.
    Attributes
    ----------
    kind : str

    items : Parameter
        The kind of items contained in the array
    """

    kind: str = field(default="array")
    items: Parameter = field(default_factory=Parameter)

    @staticmethod
    def load(data: Any) -> "ArrayParameter":
        """Load a ArrayParameter instance."""

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for ArrayParameter: {data}")

        # create new instance
        instance = ArrayParameter()
        if data is not None and "kind" in data:
            instance.kind = data["kind"]
        if data is not None and "items" in data:
            instance.items = Parameter.load(data["items"])
        return instance
