##########################################
# WARNING: This is an auto-generated file.
# DO NOT EDIT THIS FILE DIRECTLY
# ANY EDITS WILL BE LOST
##########################################
from dataclasses import dataclass, field
from typing import Any


@dataclass
class EnvironmentVariable:
    """Definition for an environment variable used in containerized agents.
    Attributes
    ----------
    name : str
        Name of the environment variable
    value : str
        Environment variable resolution
    """

    name: str = field(default="")
    value: str = field(default="")

    @staticmethod
    def load(data: Any) -> "EnvironmentVariable":
        """Load a EnvironmentVariable instance."""
        # handle alternate representations
        if isinstance(data, str):
            data = {"value": data}

        if not isinstance(data, dict):
            raise ValueError(f"Invalid data for EnvironmentVariable: {data}")

        # create new instance
        instance = EnvironmentVariable()
        if data is not None and "name" in data:
            instance.name = data["name"]
        if data is not None and "value" in data:
            instance.value = data["value"]
        return instance
