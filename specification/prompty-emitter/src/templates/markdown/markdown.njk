# {{ node.typeName.name }}

{{ node.description }}

## Class Diagram

```mermaid
---
title: {{ node.typeName.name }}
config:
  look: handDrawn
  theme: colorful
  class:
    hideEmptyMembersBox: true
---
classDiagram
    class {{ node.typeName.name }} {
      {%- for prop in node.properties %}
        +{{ prop.typeName.name }}{{ "[]" if prop.isCollection else "" }} {{ prop.name }}
      {%- endfor %}
    }
    {%- for type in node.childTypes %}
    class {{ type.typeName.name }} {
      {%- for prop in type.properties %}
        +{{ prop.typeName.name | safe }}{{ "[]" if prop.isCollection else "" }} {{ prop.name }}
      {%- endfor %}
    }
    {{ node.typeName.name }} <|-- {{ type.typeName.name }}
    {%- endfor %}
    {%- for type in compositionTypes %}
    class {{ type.typeName.name }} {
      {%- for prop in type.properties %}
        +{{ prop.typeName.name | safe }}{{ "[]" if prop.isCollection else "" }} {{ prop.name }}
      {%- endfor %}
    }
    {{ node.typeName.name }} *-- {{ type.typeName.name }}
    {%- endfor %}
```
{% if md %}
## Markdown Example

```markdown
{{ md | safe }}
```
{% endif %}

{% if yml %}
## Yaml Example

```yaml
{{ yml | safe }}
```
{% endif %}

{% if node.properties.length > 0 %}

## Properties

| Name | Type | Description |
| ---- | ---- | ----------- |
{% for prop in node.properties -%}
| {{ prop.name }} | {{ renderType(prop) }} | {{ prop.description }} {{ renderChildTypes(prop) | safe }} |
{% endfor -%}
{% endif %}



{% if node.childTypes.length > 0 %}
## Child Types

The following types extend `{{ node.typeName.name }}`:

{% for type in node.childTypes -%}
- [{{ type.typeName.name }}]({{ type.typeName.name }}.md)
{% endfor -%}
{% endif %}

{% if compositionTypes.length > 0 %}
## Composed Types
The following types are composed within `{{ node.typeName.name }}`:

{% for type in compositionTypes -%}
- [{{ type.typeName.name }}]({{ type.typeName.name }}.md)
{% endfor -%}
{% endif %}

{% if alternateCtors.length > 0 %}
## Alternate Constructions

The following alternate constructions are available for `{{ node.typeName.name }}`. 
These allow for simplified creation of instances using a single property.

{% for ctor in alternateCtors -%}
### {{ ctor.scalar }} {{ ctor.title }}
{{ ctor.description }}

The following simplified representation can be used:
```yaml
{{ ctor.simple | safe }}
```
This is equivalent to the full representation:
```yaml
{{ ctor.expanded | safe }}
```
{% endfor -%}
{% endif %}