// Copyright (c) Microsoft. All rights reserved.
using System.Text.Json.Serialization;
using YamlDotNet.Core;
using YamlDotNet.Core.Events;
using YamlDotNet.Serialization;
using YamlDotNet.RepresentationModel;

#pragma warning disable IDE0130
namespace {{ node.typeName.namespace }};
#pragma warning restore IDE0130

/// <summary>
{%- for line in node.description.split('\n') %}
/// {{ line }}
{%- endfor %}
/// </summary>
[JsonConverter(typeof({{ node.typeName.name }}JsonConverter))]
public{% if node.isAbstract %} abstract{% endif %} class {{ node.typeName.name }} : {% if node.base %}{{ node.base.name }}, {% endif %}IYamlConvertible
{
    /// <summary>
    /// Initializes a new instance of <see cref="{{ node.typeName.name }}"/>.
    /// </summary>
    #pragma warning disable CS8618
    {% if node.isAbstract %}protected{% else %}public{% endif %} {{ node.typeName.name }}()
    {
    }
    #pragma warning restore CS8618
    {% for prop in node.properties %}    
    {{ renderSummary(prop) | safe }}
    public {{ renderPropertyModifier(prop) }}{{ renderType(prop) | safe }} {{ renderPropertyName(prop) }} { get; set; }{{ renderDefault(prop) | safe }}
    {% endfor %}

    public{% if node.base %} new{% endif %} void Read(IParser parser, Type expectedType, ObjectDeserializer nestedObjectDeserializer)
    {
        {%- if alternates.length > 0 %}
        if(parser.TryConsume<Scalar>(out var scalar))
        {
            {%- for alt in alternates %}
                {%- if alt.scalar == "bool" %}
            {% if not loop.first %}else {% endif %}if (scalar.Value.ToLower() == "true" || scalar.Value.ToLower() == "false")
            {
                var {{ alt.scalar }}Value = scalar.Value.ToLower() == "true";
                {%- for item in alt.expansion %}
                {{ item.property }} = {{ item.value | safe }};
                {%- endfor %}
                return;
            }
                {%- else %}
            // check for non-numeric characters to differentiate strings from numbers
            {% if not loop.first %}else {% endif %}if (scalar.Value.Length > 0 && scalar.Value.Any(c => !char.IsDigit(c) && c != '.' && c != '-'))
            {
                var {{ alt.scalar }}Value = scalar.Value;
                {%- for item in alt.expansion %}
                {{ item.property }} = {{ item.value | safe }};
                {%- endfor %}
                return;
            }
                {%- endif %}
            {%- endfor %}
            {%- if numericAlternates.length > 0 %}
                {%- for alt in numericAlternates %}
                    {%- if alt.scalar == "float" %}
            else if (scalar.Value.Contains('.') || scalar.Value.Contains('e') || scalar.Value.Contains('E'))
            { 
                // try parse as float
                if (float.TryParse(scalar.Value, out float floatValue))
                {
                    {%- for item in alt.expansion %}
                    {{ item.property }} = {{ item.value | safe }};
                    {%- endfor %}
                    return;
                }
            }
                    {%- else %}
            else if (scalar.Value.All(c => char.IsDigit(c)))
            {
                // try parse as int
                if (int.TryParse(scalar.Value, out int intValue))
                {
                    {%- for item in alt.expansion %}
                    {{ item.property }} = {{ item.value | safe }};
                    {%- endfor %}
                    return;
                }
            }
                    {%- endif %}
                {%- endfor %}
            {%- endif %}
            else
            {
                throw new YamlException($"Unexpected scalar value '{{scalar.Value}}' when parsing {{ node.typeName.name }}. Expected one of the supported shorthand types or a mapping.");
            }
        }
        {%- endif %}

        var node = nestedObjectDeserializer(typeof(YamlMappingNode)) as YamlMappingNode;
        if (node == null)
        {
            throw new YamlException("Expected a mapping node for type {{ node.typeName.name }}");
        }
        {% if polymorphicTypes %}
        // handle polymorphic types
        if (node.Children.TryGetValue(new YamlScalarNode("{{ node.discriminator }}"), out var discriminatorNode))
        {
            var discriminatorValue = (discriminatorNode as YamlScalarNode)?.Value;
            switch (discriminatorValue)
            {
                {%- for type in polymorphicTypes.types %}
                case "{{ type.value }}":
                    var {{ type.value }}{{ node.typeName.name }} = nestedObjectDeserializer(typeof({{ type.instance.typeName.name }})) as {{ type.instance.typeName.name }};
                    if ({{ type.value }}{{ node.typeName.name }} == null)
                    {
                        throw new YamlException("Failed to deserialize polymorphic type {{ type.instance.typeName.name }}");
                    }
                    return;
                {%- endfor %}
                default:
                {%- if polymorphicTypes.default %}
                    return;
                {%- else %}
                throw new YamlException($"Unknown type discriminator '{{discriminatorValue}}' when parsing {{ node.typeName.name }}");
                {%- endif %}
                    
            }
        }
        {%- endif %}
    }

    public{% if node.base %} new{% endif %} void Write(IEmitter emitter, ObjectSerializer nestedObjectSerializer)
    {
        emitter.Emit(new MappingStart());
        {%- for prop in node.properties %}
        {% if prop.isOptional %}
        if ({{ renderPropertyName(prop) }} != null)
        {
            emitter.Emit(new Scalar("{{ prop.name }}"));
            nestedObjectSerializer({{ renderPropertyName(prop) }});
        }
        {% else %}
        emitter.Emit(new Scalar("{{ prop.name }}"));
        nestedObjectSerializer({{ renderPropertyName(prop) }});
        {%- endif %}
        {%- endfor %}
    }
}
