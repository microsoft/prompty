// Copyright (c) Microsoft. All rights reserved.
using System.Text.Json;
using System.Text.Json.Serialization;

#pragma warning disable IDE0130
namespace {{ node.typeName.namespace }};
#pragma warning restore IDE0130

/// <summary>
{% for line in node.description.split('\n') -%}
/// {{ line }}
{% endfor -%}
/// </summary>
[JsonConverter(typeof({{ node.typeName.name }}Converter))]
public{% if node.isAbstract %} abstract{% endif %} class {{ node.typeName.name }}{% if node.base %} : {{ node.base.name }}{% endif %}
{
    /// <summary>
    /// Initializes a new instance of <see cref="{{ node.typeName.name }}"/>.
    /// </summary>
    {% if node.isAbstract %}protected{% else %}public{% endif %} {{ node.typeName.name }}()
    {
    }
    {% for prop in node.properties %}    
    {{ renderSummary(prop) | safe }}
    public {{ renderPropertyModifier(prop) }}{{ renderType(prop) | safe }} {{ renderPropertyName(prop) }} { get; set; }{{ renderDefault(prop) | safe }}
    {% endfor %}

    /*
    /// <summary>
    /// Initializes a new instance of <see cref="{{ node.typeName.name }}"/>.
    /// </summary>
    /// <param name="props">Properties for this instance.</param>
    internal static {% if node.base %}new {% endif %}{{ node.typeName.name }} Load(object props)
    {
        {%- if node.alternates.length > 0 %}
        IDictionary<string, object> data;
        {% for alt in alternates -%}
        {% if not loop.first %}else {% endif %}if (props is {{ alt.scalar }} {{ alt.scalar }}Value)
        {
            data = new Dictionary<string, object>
            {
               {{ alt.alternate | safe}}
            };
        }
        {% endfor -%}
        else
        {
            data = props.ToParamDictionary();
        }
        {% else %}
        IDictionary<string, object> data = props.ToParamDictionary();
        {% endif -%}
        {%- if polymorphicTypes %}
        // load polymorphic {{ node.typeName.name }} instance
        var instance = Load{{ node.discriminator | capitalize }}(data);
        {% else %}
        // create new instance
        var instance = new {{ node.typeName.name }}();
        {% endif -%}
        {%- for prop in node.properties %}
        if (data.TryGetValue("{{ prop.name }}", out var {{ prop.name }}Value))
        {
            {{ renderSetInstance(prop, "instance", "data") | safe }}
        }
        {%- endfor %}
        return instance;
    }
    {% for prop in collectionTypes %}
    internal static IList<{{ prop.typeName.name }}> Load{{ renderPropertyName(prop) }}(object data)
    {
        return [.. data.GetNamedDictionaryList().Select(item => {{ prop.typeName.name }}.Load(item))];
    }
    {% endfor %}
    {% if polymorphicTypes %}
    /// <summary>
    /// Load a polymorphic instance of <see cref="{{ node.typeName.name }}"/> based on the "{{ node.discriminator }}" property.
    /// </summary>
    internal static {{ node.typeName.name }} Load{{ node.discriminator | capitalize }}(IDictionary<string, object> props)
    {
        // load polymorphic {{ node.typeName.name }} instance from {{ node.discriminator }} property
        if(props.ContainsKey("{{ node.discriminator }}"))
        {
            var discriminator_value = props.GetValueOrDefault<string>("{{ node.discriminator }}");
            {%- set first = polymorphicTypes.first -%}
            {%- set others = polymorphicTypes.others -%}
            {%- set default = polymorphicTypes.default -%}
            {%- if first %}
            if(discriminator_value == "{{ first.value }}")
            {
                return {{ first.instance.typeName.name }}.Load(props);
            }
            {%- for other in others %}
            else if (discriminator_value == "{{ other.value }}")
            {
                return {{ other.instance.typeName.name }}.Load(props);
            }
            {%- endfor %}
            {%- endif %}
            {%- if default %}
            else
            {
                {% if default.instance.typeName.name == node.typeName.name -%}
                //create new instance (stop recursion)
                return new {{ node.typeName.name }}();
                {%- else %}
                // load default instance
                return {{ default.instance.typeName.name }}.Load(props);
                {% endif %}
            }
            {%- else %}
            else
            {
                throw new ArgumentException($"Unknown {{ node.typeName.name }} discriminator value: {discriminator_value}");
            }
            {%- endif %}
        }
        else
        {
            throw new ArgumentException("Missing {{ node.typeName.name }} discriminator property: '{{ node.discriminator }}'");
        }
    }
    {% endif %}
    */
}


{% if node.isAbstract %}
{% if node.typeName.name.startsWith("Tool") %}
{%- set testType = "Server" + node.typeName.name -%}
{% else %}
{%- set testType = "Generic" + node.typeName.name -%}
{% endif %}
{% else %}
{%- set testType = node.typeName.name -%}
{% endif %}

{%- set others = polymorphicTypes.others -%}
{%- set default = polymorphicTypes.default -%}
public class {{ node.typeName.name }}Converter: JsonConverter<{{ node.typeName.name }}>
{
    public override {{ node.typeName.name }} Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType == JsonTokenType.Null)
        {
            throw new JsonException("Cannot convert null value to {{ node.typeName.name }}.");
        }

        using (var jsonDocument = JsonDocument.ParseValue(ref reader))
        {
            var rootElement = jsonDocument.RootElement;
            var instance = new {{ testType }}();
            {% for prop in node.properties %}
            if (rootElement.TryGetProperty("{{ prop.name }}", out JsonElement {{ prop.name }}Value))
            {
                {%- if prop.isDict %}
                instance.{{ renderPropertyName(prop) }} = JsonSerializer.Deserialize<Dictionary<string, object>>({{ prop.name }}Value.GetRawText(), options){{ renderNullCoalescing(prop) | safe }};
                {%- elif prop.isCollection %}
                    {%- if prop.isScalar %}
                instance.{{ renderPropertyName(prop) }} = [.. {{ prop.name }}Value.EnumerateArray().Select(x => x.{{ converterMapper(prop.typeName.name) }}() ?? throw new ArgumentException("Empty array elements for {{ prop.name }} are not supported"))];
                    {%- else %}
                // need object collection deserialization
                    {%- endif %}
                {%- else %}
                    {%- if prop.isScalar %}
                instance.{{ renderPropertyName(prop) }} = {{ prop.name }}Value.{{ converterMapper(prop.typeName.name) }}(){{ renderNullCoalescing(prop) | safe }};
                    {%- else %}
                instance.{{ renderPropertyName(prop) }} = JsonSerializer.Deserialize<{{ renderType(prop) | safe }}>({{ prop.name }}Value.GetRawText(), options){{ renderNullCoalescing(prop) | safe }};
                    {%- endif %}
                {%- endif %}
            }
            {% endfor %}
            return instance;
        }
    }

    public override void Write(Utf8JsonWriter writer, {{ node.typeName.name }} value, JsonSerializerOptions options)
    {
        writer.WriteStartObject();
        {%- for prop in node.properties %}
        {%- if prop.isOptional %}
        if(value.{{ renderPropertyName(prop) }} != null)
        {
            writer.WritePropertyName("{{ prop.name }}");
            JsonSerializer.Serialize(writer, value.{{ renderPropertyName(prop) }}, options);
        }
        {%- else %}
        writer.WritePropertyName("{{ prop.name }}");
        JsonSerializer.Serialize(writer, value.{{ renderPropertyName(prop) }}, options);
        {%- endif %}
        {% endfor %}
        writer.WriteEndObject();
    }
}