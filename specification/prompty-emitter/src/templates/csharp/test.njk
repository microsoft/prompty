using Xunit;
using System.Text.Json;
using YamlDotNet.Serialization;

#pragma warning disable IDE0130
namespace {{ node.typeName.namespace }};
#pragma warning restore IDE0130


public class {{ node.typeName.name }}ConversionTests
{   {% for sample in examples %}
    [Fact]
    public void LoadYamlInput{% if not loop.first %}{{loop.index - 1}}{% endif %}()
    {
        string yamlData = """
        {%- for line in sample.yaml %}
        {{ line | safe }}
        {%- endfor %}
        """;
        

        var serializer = new DeserializerBuilder().Build();
        var instance = serializer.Deserialize<{{ node.typeName.name }}>(yamlData);

        Assert.NotNull(instance);
        {%- for validation in sample.validation %}
        {%- if validation.value == "True" or validation.value == "False" %}
        Assert.{% if validation.value == "False" %}False{% else %}True{% endif %}(instance.{{ validation.key  }});
        {%- else %}
        Assert.Equal({{ validation.startDelim | safe }}{{ validation.value | safe }}{{ validation.endDelim | safe }}, instance.{{ validation.key }});
        {%- endif %}
        {%- endfor %}
    }

    [Fact]
    public void LoadJsonInput{% if not loop.first %}{{loop.index - 1}}{% endif %}()
    {
        string jsonData = """
        {%- for line in sample.json %}
        {{ line | safe }}
        {%- endfor %}
        """;

        var instance = JsonSerializer.Deserialize<{{ node.typeName.name }}>(jsonData);
        Assert.NotNull(instance);
        {%- for validation in sample.validation %}
        {%- if validation.value == "True" or validation.value == "False" %}
        Assert.{% if validation.value == "False" %}False{% else %}True{% endif %}(instance.{{ validation.key  }});
        {%- else %}
        Assert.Equal({{ validation.startDelim | safe }}{{ validation.value | safe }}{{ validation.endDelim | safe }}, instance.{{ validation.key }});
        {%- endif %}
        {%- endfor %}
    }
    {%- endfor %}

    {%- if alternates.length > 0 %}
    {% for alt in alternates -%}
    [Fact]
    public void LoadJsonFrom{{ alt.scalar | title }}()
    {
        // alternate representation as {{ alt.scalar }}
        {%- if alt.scalar == "string" %}
        var data = "{{ alt.value | replace('"', '\\"') | safe }}";
        {%- else %}
        var data = {% if alt.value == "True" %}true{% elif alt.value == "False" %}false{% else %}{{ alt.value | safe }}{% endif %};
        {%- endif %}
        var instance = JsonSerializer.Deserialize<{{ node.typeName.name }}>(data);
        Assert.NotNull(instance);
        {%- for item in alt.validation %}
        {%- if item.value == "True" or item.value == "False" %}
        Assert.NotNull(instance.{{ item.key }});
        Assert.IsType<bool>(instance.{{ item.key }});
        Assert.{% if item.value == "False" %}False{% else %}True{% endif %}((bool)instance.{{ item.key }});
        {%- elif item.value | isFloat %}
        Assert.IsType<float>(instance.{{ item.key }});
        Assert.Equal({{ item.delimeter | safe }}{{ item.value | safe }}{{ item.delimeter | safe }}, (float)instance.{{ item.key }}, precision: 5);
        {%- else %}
        Assert.Equal({{ item.delimeter | safe }}{{ item.value | safe }}{{ item.delimeter | safe }}, instance.{{ item.key }});   
        {%- endif %}
        {%- endfor %}
    }


    [Fact]
    public void LoadYamlFrom{{ alt.scalar | title }}()
    {
        // alternate representation as {{ alt.scalar }}
        {%- if alt.scalar == "string" %}
        var data = "{{ alt.value | replace('"', '\\"') | safe }}";
        {%- else %}
        var data = {% if alt.value == "True" %}true{% elif alt.value == "False" %}false{% else %}{{ alt.value | safe }}{% endif %};
        {%- endif %}
        var serializer = new DeserializerBuilder().Build();
        var instance = serializer.Deserialize<{{ node.typeName.name }}>(data.ToString());
        Assert.NotNull(instance);
        {%- for item in alt.validation %}
        {%- if item.value == "True" or item.value == "False" %}
        Assert.NotNull(instance.{{ item.key }});
        Assert.IsType<bool>(instance.{{ item.key }});
        Assert.{% if item.value == "False" %}False{% else %}True{% endif %}((bool)instance.{{ item.key }});
        {%- elif item.value | isFloat %}
        Assert.IsType<float>(instance.{{ item.key }});
        Assert.Equal({{ item.delimeter | safe }}{{ item.value | safe }}{{ item.delimeter | safe }}, (float)instance.{{ item.key }}, precision: 5);
        {%- else %}
        Assert.Equal({{ item.delimeter | safe }}{{ item.value | safe }}{{ item.delimeter | safe }}, instance.{{ item.key }});   
        {%- endif %}
        {%- endfor %}
    }
    {% endfor %}
    {%- endif %}
}