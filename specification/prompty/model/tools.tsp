import "@prompty/emitter";
import "./core.tsp";
import "./tools";

namespace Prompty.Core {
  /**
   * Represents a binding between an input property and a tool parameter.
   */
  model Binding {
    @doc("The input property that will be bound to the tool parameter argument")
    input: string;
  }

  alias Bindings = Record<Binding> | Named<Binding, "Name of the binding">[];

  /**
   * Represents a parameter for a tool.
   */
  @discriminator("type")
  model Parameter {
    @doc("The data type of the tool parameter")
    type: string;

    @doc("A short description of the property")
    description?: string = "";

    @doc("Whether the tool parameter is required")
    required?: boolean = true;

    @doc("Allowed enumeration values for the parameter")
    `enum`?: unknown[] = #[];
  }

  /**
   * Represents an object parameter for a tool.
   */
  model ObjectParameter extends Parameter {
    type: "object";

    @doc("The properties of the object parameter")
    properties: Parameters = #[];
  }

  /**
   * Represents an array parameter for a tool.
   */
  model ArrayParameter extends Parameter {
    type: "array";

    @doc("The type of items contained in the array")
    items: Parameter | Named<Parameter>;
  }

  alias Parameters = Record<Parameter> | Named<Parameter, "Name of the parameter">[];

  union ToolTypes {
    functionType: "function",
    string
  };

  /**
   * Represents a tool that can be used in prompts.
   */
  @abstract
  @discriminator("type")
  model Tool {
    @doc("The type identifier for the tool")
    type: ToolTypes;

    @doc("A short description of the tool for metadata purposes")
    description?: string = "";

    @doc("Tool argument bindings to input properties")
    bindings?: Bindings = #[];
  }

  /**
   * Represents a local function tool.
   */
  model FunctionTool extends Tool {
    @doc("The type identifier for function tools")
    type: "function";

    @doc("Parameters accepted by the function tool")
    parameters: Parameters = #[];
  }

  /**
   * Represents a generic server tool that runs on a server
   * This tool type is designed for operations that require server-side execution
   * It may include features such as authentication, data storage, and long-running processes
   * This tool type is ideal for tasks that involve complex computations or access to secure resources
   * Server tools can be used to offload heavy processing from client applications
   */
  model ServerTool extends Tool {
    @doc("The type identifier for server tools")
    type: "*";

    @doc("Configuration options for the server tool")
    options: Record<unknown> = #{};
  }

  alias Tools = Record<Tool> | Named<Tool>[];
}
